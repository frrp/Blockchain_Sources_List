## Programming Blockchain Reading List and Projects

* The goal of this document is to provide a reading list for learning to program Blockchain systems as well as the crucial code
* It is not meant to be comprehensive, it lists only the most useful sources

The document is split into two major sections: [Content](#content) and [Code](#code)

* The Content section contains a reading list of mostly technical documents for Blockchain development
* The Code section contains a list of open-source blockchain and bitcoin projects 
* WIP: send suggestions to [@FrantaPolach](https://twitter.com/FrantaPolach) or [open a GitHub issue](https://github.com/frrp/Blockchain_Sources_List/issues)

### <a name="content"></a>Content

#### Infrastructure
* [BigchainDB](https://www.bigchaindb.com/) (BigchainDB)
* [R3](http://www.r3cev.com/) (R3)
* [IPFS](https://ipfs.io/) (IPFS)

#### Papers
* [Original bitcoin paper](https://bitcoin.org/bitcoin.pdf) (Satoshi)

#### Specifications
* [BIP70: Payments Protocol](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) (Andresen)
* [Working with the Payments Protocol](https://code.google.com/p/bitcoinj/wiki/PaymentProtocol) (Andresen)
* [BIP32: Hierarchical Deterministic (HD) Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) (Wuille)
* [BIP32 Implementation: Money Tree HD Wallet](https://github.com/BitVault/money-tree) (BitVault)
* [Deterministic Wallet](https://en.bitcoin.it/wiki/Deterministic_wallet)
* [Transactions Reference](https://en.bitcoin.it/wiki/Transactions)
* [Script Reference](https://en.bitcoin.it/wiki/Script)
* [Raw Transactions API](https://en.bitcoin.it/wiki/Raw_Transactions)
* [Colored Coins Protocol Specification](https://github.com/Flavien/colored-coins-protocol/blob/master/specification.mediawiki) (Flavien)
* [The Mastercoin Protocol Specification](https://github.com/mastercoin-MSC/spec) (Gross)

<!---
#### Videos
* [Programming Bitcoin Youtube Channel](https://www.youtube.com/programmingbitcoin) (Murray)
* [How Bitcoin Works Under the Hood](https://www.youtube.com/watch?v=Lx9zgZCMqXE) (Driscoll)
* [Coding Multi-Signature Addresses](https://www.youtube.com/watch?v=zIbUSaZBJgU) (D'Angelo)

#### API Docs
* [Bitcoin Doxygen](https://dev.visucore.com/bitcoin/doxygen/annotated.html)
* [Original Bitcoin client/API calls list](https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list)

#### Sidechains
* [Tree-chains preliminary summary](http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04388.html) (Todd)
* [Why do people think that side-chains are going to be secure?](http://www.reddit.com/r/Bitcoin/comments/22vn4m/why_do_people_think_that_sidechains_are_going_to/cgqy5w6) (Maxwell)
* [Discussion on 2-way pegging: is there a way to do bitcoin-staging?](http://sourceforge.net/p/bitcoin/mailman/bitcoin-development/thread/20130519132359.GA12366%40netbook.cypherspace.org/#msg30868065)
* [Sidechains, Treechains, the TL;DR](http://blog.greenaddress.it/2014/06/13/sidechains-treechains-the-tldr/) (Sanders)
* [Sidechains Explained](http://cryptobizmagazine.com/sidechains-explained/) (Payne)
* [Side Chains: The How, The Challenges and the Potential](http://bitcoinmagazine.com/12349/side-chains-challenges-potential/) (Buterin)
* [Sidechain Technical Feasibility Discussion](https://bitcointalk.org/index.php?topic=566704.0;all) (discussion)
* [Alternative Chains / merged mining](https://en.bitcoin.it/wiki/Alternative_Chains) 
-->

### <a name="code"></a>Code

#### Main
* [R3 Corda](https://www.r3cev.com/blog/2016/11/25/countdown-to-corda-open-source) `Java` (corda) 
* [Hyperledger Fabric](https://github.com/hyperledger/fabric) `Go` (fabric) 
* [Sawtooth Lake Distributed ledger](https://github.com/hyperledger/sawtooth-core) `python` (sawtooth)
* [BigchainDB](https://github.com/bigchaindb/bigchaindb) `python` (BigchainDB)

#### Original Bitcoin
* [bitcoin](https://github.com/bitcoin/bitcoin) `C++` (Satoshi) 
* [bitcoinj: Java implementation of a Bitcoin client-only node](https://code.google.com/p/bitcoinj/) `Java` (bitcoinj)
* [bitcoin-qt: Qt GUI for C++ Bitcoin client](https://github.com/laanwj/bitcoin-qt) `C++` (laanwj)
* [btcd: alternative full node bitcoin implementation written in Go](https://github.com/conformal/btcd) `Go` (conformal)

#### Tools
* [bitcointools: python-based tools for the Bitcoin cryptocurrency system](https://github.com/gavinandresen/bitcointools) `python` (gavinandresen)
* [pycoin: python-based Bitcoin utility library.](https://github.com/richardkiss/pycoin) `python` (richardkiss)
* [bitcoin-testnet-box: Create a private, difficulty 1 bitcoin testnet](https://github.com/freewil/bitcoin-testnet-Box) `Shell` (freewil)
* [transactions: Bitcoin for humans](https://github.com/ascribe/transactions) `python` (ascribe-transactions)

#### Block Exploration
* [bitcoin-abe: Abe: block browser for Bitcoin and similar currencies](https://github.com/jtobey/bitcoin-abe) `python` (jtobey)
* [insight: A bitcoin blockchain API for web wallets](https://github.com/bitpay/insight) `JavaScript` (bitpay)
* [node-bitcoin-explorer: A Block Explorer clone built using node-bitcoin-p2p](https://github.com/bitcoinjs/node-bitcoin-explorer) `JavaScript` (bitcoinjs)
* [BTCplex](https://github.com/tsileo/btcplex) `Go` (tsileo)
* [blockparser: Fast, quick and dirty bitcoin blockchain parser](https://github.com/znort987/blockparser) `C++` (znort987)
* [blockchain-explorer](https://github.com/hyperledger/blockchain-explorer) `JavaScript` (hyperledger-explorer)

#### Related Protocols
* [bitid: Bitcoin Authentication Open Protocol](https://github.com/bitid/bitid) (Larch)
